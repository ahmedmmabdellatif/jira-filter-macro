import React from 'react';
import { type StatelessProps as Props } from '../types';
declare const DynamicTable: ({ caption, head, highlightedRowIndex, rows, sortKey, sortOrder, loadingLabel, onPageRowsUpdate, testId, totalRows: passedDownTotalRows, label, isLoading, isFixedSize, rowsPerPage, onSetPage, onSort, page, emptyView, isRankable, isRankingDisabled, onRankStart, onRankEnd, loadingSpinnerSize, paginationi18n, }: Props) => JSX.Element;
export { DynamicTable as DynamicTableWithoutAnalytics };
/**
 * __Dynamic table stateless__
 *
 * A stateless table that requires consumers to manage the sorting, drag and drop, and pagination.
 *
 * - [Examples](https://atlaskit.atlassian.com/packages/design-system/dynamic-table)
 * - [Code](https://bitbucket.org/atlassian/atlassian-frontend/packages/design-system/dynamic-table)
 */
declare const DynamicTableStateless: React.ForwardRefExoticComponent<Pick<Omit<Props, keyof import("@atlaskit/analytics-next").WithAnalyticsEventsProps> & React.RefAttributes<any> & import("@atlaskit/analytics-next").WithContextProps, "head" | "caption" | "rows" | "emptyView" | "loadingSpinnerSize" | "isLoading" | "loadingLabel" | "isFixedSize" | "rowsPerPage" | "totalRows" | "onSetPage" | "onSort" | "onPageRowsUpdate" | "page" | "sortKey" | "sortOrder" | "isRankable" | "isRankingDisabled" | "onRankStart" | "onRankEnd" | "paginationi18n" | "highlightedRowIndex" | "testId" | "label" | "key" | "analyticsContext"> & React.RefAttributes<any>>;
export default DynamicTableStateless;
